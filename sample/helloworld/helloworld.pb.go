// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package feed

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type FeedResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedResponse) Reset()         { *m = FeedResponse{} }
func (m *FeedResponse) String() string { return proto.CompactTextString(m) }
func (*FeedResponse) ProtoMessage()    {}
func (*FeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_17b8c58d586b62f2, []int{1}
}

func (m *FeedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeedResponse.Unmarshal(m, b)
}
func (m *FeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeedResponse.Marshal(b, m, deterministic)
}
func (m *FeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedResponse.Merge(m, src)
}
func (m *FeedResponse) XXX_Size() int {
	return xxx_messageInfo_FeedResponse.Size(m)
}
func (m *FeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FeedResponse proto.InternalMessageInfo

func (m *FeedResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "feed.Empty")
	proto.RegisterType((*FeedResponse)(nil), "feed.FeedResponse")
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor_17b8c58d586b62f2) }

var fileDescriptor_17b8c58d586b62f2 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x4b,
	0x4d, 0x4d, 0x51, 0x62, 0xe7, 0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x54, 0xd2, 0xe0, 0xe2, 0x71,
	0x4b, 0x4d, 0x4d, 0x09, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe0, 0x62, 0xcf,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x8d,
	0xac, 0xb9, 0xd8, 0x40, 0x2a, 0x53, 0x8b, 0x84, 0x0c, 0xb9, 0xb8, 0xdc, 0x53, 0x4b, 0xfc, 0x52,
	0xcb, 0x41, 0x7c, 0x21, 0x6e, 0x3d, 0x90, 0x89, 0x7a, 0x60, 0xe3, 0xa4, 0x84, 0x20, 0x1c, 0x64,
	0x23, 0x95, 0x18, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0x96, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xb2, 0xab, 0x2b, 0x21, 0x90, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FeederClient is the client API for Feeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeederClient interface {
	GetNewFeed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Feeder_GetNewFeedClient, error)
}

type feederClient struct {
	cc *grpc.ClientConn
}

func NewFeederClient(cc *grpc.ClientConn) FeederClient {
	return &feederClient{cc}
}

func (c *feederClient) GetNewFeed(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Feeder_GetNewFeedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Feeder_serviceDesc.Streams[0], "/feed.Feeder/GetNewFeed", opts...)
	if err != nil {
		return nil, err
	}
	x := &feederGetNewFeedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Feeder_GetNewFeedClient interface {
	Recv() (*FeedResponse, error)
	grpc.ClientStream
}

type feederGetNewFeedClient struct {
	grpc.ClientStream
}

func (x *feederGetNewFeedClient) Recv() (*FeedResponse, error) {
	m := new(FeedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FeederServer is the server API for Feeder service.
type FeederServer interface {
	GetNewFeed(*Empty, Feeder_GetNewFeedServer) error
}

// UnimplementedFeederServer can be embedded to have forward compatible implementations.
type UnimplementedFeederServer struct {
}

func (*UnimplementedFeederServer) GetNewFeed(req *Empty, srv Feeder_GetNewFeedServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNewFeed not implemented")
}

func RegisterFeederServer(s *grpc.Server, srv FeederServer) {
	s.RegisterService(&_Feeder_serviceDesc, srv)
}

func _Feeder_GetNewFeed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeederServer).GetNewFeed(m, &feederGetNewFeedServer{stream})
}

type Feeder_GetNewFeedServer interface {
	Send(*FeedResponse) error
	grpc.ServerStream
}

type feederGetNewFeedServer struct {
	grpc.ServerStream
}

func (x *feederGetNewFeedServer) Send(m *FeedResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Feeder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "feed.Feeder",
	HandlerType: (*FeederServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNewFeed",
			Handler:       _Feeder_GetNewFeed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}
